sqldf("select *from iris where [Sepal.Length] in (1,6)")
sqldf("select *from iris where [Sepal.Length] in (5,6)")
sqldf("select *from iris where [Sepal.Length] in (2,6)")
sqldf("select [Sepal.Length] as Length, Species as  super from iris where [Sepal.Width]>3.0|[Sepal.Width]<2.7 group by [Sepal.Width]")
sqldf("select [Sepal.Length] as Length, Species as  super from iris where [Sepal.Width]>3.0|[Sepal.Width]<2.7 group by [Sepal.Width] limit 10")
sqldf("select ([Sepal.Length]*[Sepal.Width]) as NEW from iris")
iris
iris$Sepal.Length
iris$Sepal.Length[1]
iris$Sepal.Length[2]
iris$Sepal.Length[iris$Sepal.Length==5.9]
iris$Sepal.Length==5.9]
iris$Sepal.Length==5.9
grep(5.9,iris$Sepal.Length)
grep(5.9,iris$Sepal.Length,value=TRUE)
c<-grep(5.9,iris$Sepal.Length)
iris$Sepal.Length[c]
c
c<-grep(5.9,iris$Sepal.Length,value=TRUE)
c
class(c)
c
c*10
c
c*10
sqldf("select [Sepal.Length] from iris where Species='setosa'")
sqldf("select [Sepal.Length] from iris where Species='setosa'")
iris$Sepal.Length==5.9
sqldf("select [Sepal.Length] from iris where Species='setosa'")
sqldf("select [Sepal.Length] from iris where Species='setosa'&[Sepal.Length>5.0]")
sqldf("select [Sepal.Length] from iris where Species='setosa'&[Sepal.Length]>5.0")
sqldf("select [Sepal.Length] from iris where Species='setosa'&[Sepal.Length]>3.0")
sqldf("select [Sepal.Length],Species from iris where Species='setosa'&[Sepal.Length]>3.0")
sqldf("select [Sepal.Length],Species from iris where Species='setosa'&&[Sepal.Length]>3.0")
sqldf("select [Sepal.Length],Species from iris where Species='setosa'and[Sepal.Length]>3.0")
sqldf("select [Sepal.Length],Species from iris where Species='setosa' and [Sepal.Length]>3.0")
sqldf("select [Sepal.Length],Species from iris where Species='setosa' and [Sepal.Length]>5.0")
sqldf("select [Sepal.Length],Species from iris where Species='setosa' and [Sepal.Length]>=5.0")
sqldf("select [Sepal.Length],Species from iris where Species='setosa' and [Sepal.Length]=5.0")
sqldf("select * from iris where [Sepal.Length]=4.9")
sqldf("select * from iris where [Sepal.Length]=4.9 limit 3")
sqldf("select * from iris where [Sepal.Length]=4.9")
sqldf("select * from iris where [Sepal.Length]=4.9 group by [Sepal.Width]")
sqldf("select * from iris where [Sepal.Length]=4.9 group by [Sepal.Width]",decreasing=TRUE)
sqldf("select * from iris where [Sepal.Length]=4.9 group by [Sepal.Width]")
a<-sqldf("select * from iris where [Sepal.Length]=4.9 group by [Sepal.Width]")
a
sort(a,decreasing = FALSE)
sort(a)
a
class(a)
a$Sepal.Width
sort(a$Sepal.Width)
sort(a$Sepal.Width,decreasing=FALSE)
sort(a$Sepal.Width,decreasing=TRUE)
sentences
s<-sentences
strsplit(s,collapse=" ")
paste(s,collapse=" ")
s
str_split(s," ")
str_split(s," ",3)
str_split(s," ",n=3)
str_split(s," ",3,simplify = TRUE)
str_split(s," ",n=3) #분할후에 얻을 갯수 n=
str_split(s," ",3,simplify = TRUE)
str_split(s)
str_length(s)
str_count(s,"data")
str_count(s,"data")
str_count(s,"the")
s
str_count(s,"the")
str_count(s,"\\w+")
a<-c("the apple","the desk","the popular song","Ariana grande")
str_pad(a=c("a","abc","abcde"),
width=6,side = "left",pad=" ")
str_pad(a=c("a","abc","abcde"),
width=6,side = "left",pad=" ")
str_pad(a=c("a","abc","abcde"),
width=6,side = "left",pad=" ")
a<-c("the apple","the desk","the popular song","Ariana grande")
str_pad(a=c("a","abc","abcde"),
width=6,side = "left",pad=" ")
mon<-1:12
mon
str_pad(string=c("a","abc","abcde"),
width=6,side = "left",pad=" ")
str_pad(mon,width =2,side="left",pad="0" )
str_pad(a,10,"left","휘바휘바!")
str_pad(a,max,"left","휘바휘바!")
str_pad(a,width=max,"left","휘바휘바!")
str_pad(a,width=max,side="left","휘바휘바!")
str_pad(a,width=max,side="left"," ")
str_pad(a,width=max(str_length(a)),side="left"," ")
str_pad(a,width=max(str_length(a)),side="left","휘바휘바!")
str_pad(a,width=max(str_length(a)),side="left","휘")
str_pad(a,width=max(str_length(a)),side="left","0")
str_pad(a,width=max(str_length(a)),side="left","")
str_pad(a,width=max(str_length(a)),side="left"," ")
str_pad(a,width=max(str_length(a)),side="both"," ")
length(a)
str_length(a)
str_pad(a,width=max(str_length(a)),side="both"," ")
str_pad(a,width=max(nchar(a)),side="both"," ")
str_pad(a,width=max(nchar(a)),side="both"," ")
str_pad(a,width=max(nchar(a)),side="right"," ")
k<-str_pad(a,width=max(nchar(a)),side="right"," ")
str_trim(k,side="both") #공백제거하는 함수
k
str_trim(k,side="both") #공백제거하는 함수
k<-str_pad(a,width=max(nchar(a)),side="both"," ")
k
str_trim(k,side="both") #공백제거하는 함수
str_c("data","mining",sep=" ")
paste("Data","mining",sep=" ")
paste("data","mining",sep=" ")
str_c("data","mining",sep=" ")
str_c(c("data mining","text mining"),
"is useful",sep=" ")
paste(c("data mining","text mining"),
"is useful",sep=" ")
k<-paste(c("data mining","text mining"),
"is useful",sep=" ")
str_c(k,collapse = "~!~!~!")
str_c(c("data mining","text mining"),
"is useful",sep=" ")
str_c(c("data mining","text mining"),
"is useful",sep=" ",collpase="휘바휘바!")
str_c(c("data mining","text mining"),
"is useful",sep="나늬늬 ",collpase="휘바휘바!")
str_c(c("data mining","text mining"),
"is useful",sep="나늬늬 ",collpase="휘바휘바!")
str_c(c("data mining","text mining"),
"is useful",sep="나늬늬 ",collpase=" ")
str_c(c("data mining","text mining"),
"is useful",sep="나늬늬 ",collpase="+")
str_c(c("data mining","text mining"),
"is useful",sep="나늬늬 ",collpase="+")[2]
str_c(c("data mining","text mining"),
"is useful",sep="",collpase="+")
str_c(k,collapse = "~!~!~!")
str_c(k,collapse="\n")
str_c(k,collapse="\n")
cat(str_c(k,collapse="\n"))
substr(k,1,6)
substr(k,1,76)
substr(k,1,7)
str_sub(k,start=1,end=4)
k
grep("\\w+",k)
grep("\\w+",k,value=TRUE)
unlist(regmatches(k,gregexpr(k,"\\w+",ignore.case=TRUE)))
unlist(regmatches(k,gregexpr(k,"data",ignore.case=TRUE)))
unlist(regmatches("\\w+",gregexpr(k,"\\w+",ignore.case=TRUE)))
unlist(regmatches("\\w+",gregexpr("\\w+",k,ignore.case=TRUE)))
unlist(regmatches(k,gregexpr("\\w+",k,ignore.case=TRUE)))
u<-unlist(regmatches(k,gregexpr("\\w+",k,ignore.case=TRUE)))
unique(u)
length(unique(u))
length(u)
str_sub(k,5,5)
str_sub(k,5,5)<-"흐미미"
k
str_sub(k,5,5)<-"-"
k
str_sub(k,5,5)<-""
k
str_sub(k,5,6)<-""
k
str_sub(k,5,5)<-" "
k
str_sub("asdfghj",start=3)
str_sub("asdfghj",end=3)
a<-"pet"
b<-"human"
a
b
a[1]
paste(a,b,sep="and")
paste(a,b,sep=" and ")
c<-paste(a,b,sep=" and ")
c
c[1]
strsplit(c,split=" ")
unlist(strsplit(c,split=" "))
unlist(strsplit(c,split=" and "))
unlist(strsplit(c,split=" and "))[1]
unlist(strsplit(c,split=" and "))[2]
c("pet","human")
unlist(strsplit(c,split=" and "))[2]
unlist(strsplit(c,split=" and "))
c("pet","human")
c
a<-c("malt","buldog","shavet")
a
b<-c("man","woman","transgender")
b
paste(a,b)
b<-c("man","woman")
b<-c("man","woman")
paste(a,b)
paste(a,b,collapse=" and ")
paste(a,b,collapse=" - ")
c<-paste(a,b,collapse=" - ")
c
strsplit(c,split=" ")
strsplit(c,split=" - ")
unlist(strsplit(c,split=" - "))
v<-unlist(strsplit(c,split=" - "))
v
strsplit(v,split=" ")
unlist(strsplit(v,split=" "))
unlist(strsplit(v,split=" "))[1]
k<-unlist(strsplit(v,split=" "))[1]
c(k[1],k[3],k[5])
k<-unlist(strsplit(v,split=" "))
c(k[1],k[3],k[5])
c(k[2],k[4],k[6])
v
regmatches(v,gregexpr("\\w+",v,ignore.case=TRUE))
unlist(regmatches(v,gregexpr("\\w+",v,ignore.case=TRUE)))
k
c
unlist(regmatches(c,gregexpr("\\w+",c,ignore.case=TRUE)))
c<-paste(a,b,collapse=" - ")
c
unlist(regmatches(c,gregexpr("\\w+",c,ignore.case=TRUE)))
grep("\\w+",v)
grep("\\w+",v,value=TRUE)
grepl("\\w+",v)
Sys.DATE()
Sys.DATE()
Sys.Date()
date()
Sys.time()
class(Sys.Date())
as.Date("2025-12-31")
as.Date("2025,12,31")
as.Date("2025-12-31")
as.Date("2025/12/31")
as.Date("2025-12-31")
as.Date("2025/12/31")
as.numeric("FALSE")
as.numeric(FALSE)
as.Date("12/31/2025")
as.Date("12/31/2025",format("%m/%d%y"))
as.Date("12/31/2025",format("%m/%d%Y"))
as.Date("12/31/2025",format("%m/%d/%Y"))
as.Date("12/31/2025",format("%m/%d/%y"))
as.Date("12/31/2025",format("%a/%d/%y"))
?sprptime
?strptime
d<-as.Date("2025-12-31")
d
format(d,format="%m/%d/%y")
d
format(d,format="%m/%d/%y")
today<-Sys.Date()
today
format(today,"%y/%m/%d")
format(today,"%y+%m+%d")
format(today,"%y/%m/%d +%a")
format(today,"%y/%m/%d +%A")
weekdays(today)
d
d+7
d+1:7
seq(4,3)
seq(4,10,2)
seq(4,10,length=2)
seq(4,10,length=4)
seq(4,10,2)
weekdays(d+1:7)
starting<-as.Date("2025-01-01")
ending<-as.Date("2025-01-31")
starting<-as.Date("2025-01-01")
ending<-as.Date("2025-01-31")
seq(starting,ending,1)
seq(starting,1)
seq(starting,length.out=7)
seq(starting,1,length.out=7)
seq(starting,,1,length.out=7)
seq(starting,by="7 days",length.out=7)
seq(starting,by="week",length.out=7)
seq(starting,by="week",length=7)
seq(starting,by="week",length=8)
seq(starting,by="year",length=8)
seq(starting,"7 days",length.out=7)
seq(starting,,"7 days",length.out=7)
seq(starting,by="7 days",length.out=7)
seq(starting,by="7 years",length.out=7)
seq(starting,by="1 month",length.out=4)
seq(starting,by="month",length.out=4)
seq(starting,by="months",length.out=4)
seq(starting,by="2 month",length.out=4)
seq(starting,by="2 months",length.out=4)
months()
quarters()
starting
ending
qrt<-seq(starting,,"3 months",length=4)
qrt
months(qrt)
quarters(qrt)
qrt<-seq(starting,,"5 months",length=4)
months(qrt)
quarters(qrt)
Sys.getlocale()
Sys.setlocale("LC_TIME","c")
Sys.setlocale("LC_TIME","C")
months(qrt)
Sys.setlocale("LC_TIME","Korean_Korea.949")
months(qrt)
Sys.setlocale() #아무 인수없이 실행시키면 초기상태로 되돌림
Sys.setlocale("LC_TIME","C") #북미 기준으로 바꾸기
Sys.setlocale() #아무 인수없이 실행시키면 초기상태로 되돌림
months(qrt)
as.POSIXct("2021-02-23")
as.POSIXct("2021-02-23, 16:45:03")
as.POSIXct("2021-02-23, 16:45:03",format="%y-%m-%d, %H:%M:$S")
as.POSIXct("2021-02-23, 16:45:03",format="%y/%m/%d, %H:%M:$S")
as.POSIXct("2021/02/23, 16:45:03",format="%y/%m/%d, %H:%M:$S")
as.POSIXct("2021/02/23, 16:45:03",format="%Y/%m/%d, %H:%M:$S")
as.POSIXct("2021/02/23, 16:45:03",format="%Y/%m/%d, %H:%M:%S")
pct<-as.POSIXct("2021/02/23, 16:45:03",format="%Y/%m/%d, %H:%M:%S")
pct
class(pct)
as.integer(pct)
plt<-as.POSIXlt("2021/02/23, 16:45:03",format="%Y/%m/%d, %H:%M:%S")
plt
class(plt)
unclass(plt)
plt$mday
plt$mon
plt$year
plt$wday
plt$hour
as.Date("2025-12-25")
dp<-as.Date("2025-12-25")
as.POSIXlt(dp)
as.POSIXlt(dp)$wday
as.POSIXlt(dp)$yday
as.POSIXlt(dp)$year
as.POSIXct(dp)$ mon +1
as.POSIXct(dp)$mon +1
as.POSIXlt(dp)$mon +1
strptime("2025-12-31")
strptime("2025-12-31",format="%y/%m/%d")
strptime("2025-12-31",format="%y-%m-%d")
strptime("2025-12-31",format="%Y-%m-%d")
a<-strptime("2025-12-31",format="%Y-%m-%d")
class(a)
a$month
a$year
a$year+1900
moon<-as.POSIXct("1969/07/20, 20:17:39",format="%Y%m%d,%H%S%M")
moon
moon<-as.POSIXct("1969/07/20, 20:17:39",format="%Y%m%d,%H:%S:%M")
moon
moon<-as.POSIXct("1969/07/20, 20:17:39",format="%Y%m%d, %H:%S:%M")
moon
moon<-as.POSIXct("1969/07/20, 20:17:39",format="%Y%m%d, %H:%S:%M",
tz="UTC")
moon
moon<-as.POSIXct("1969/07/20, 20:17:39",format="%Y/%m/%d, %H:%S:%M",
tz="UTC")
moon
moon<-as.POSIXct("1969-07-20, 20:17:39",format="%Y/%m/%d, %H:%S:%M",
tz="UTC")
moon
moon
moon<-as.POSIXct("1969/07/20, 20:17:39",format="%Y/%m/%d, %H:%S:%M",
tz="UTC")
moon
moon<-as.POSIXct("1969/07/20, 20:17:39",format="%Y/%m/%d, %H:%M:%S",
tz="UTC")
moon
format(moon,"the time of the Apollo moon landing was %Y/%m/%d, %H:%M:%S")
format(moon,"the time of the Apollo moon landing was %Y/%m/%d,at %H:%M:%S")
moon
format(moon,"the time of the Apollo moon landing was %Y/%m/%d,at %H:%M:%S")
as.Date("2021/03/02")
as.Date("03/02")
as.Date("03/02/2022")
as.Date("03/02/2022",format="%m/%d%Y")
as.Date("03/02/2022",format="%m/%d/%Y")
Sys.Date()
?strptime()
as.Date("03/02/2022",format="%m/%d/%Y")
as.Date("03/02/2022",format("%m/%d/%Y"))
weekdays("2021-02-24")
weekdays(as.Date(2021-02-24))
weekdays(as.Date("2021-02-24"))
Sys.time
Sys.time()
Setlocale()
Setlocale()
Sys.Setlocale()
Sys.Setlocale
Sys.setlocale()
Sys.setloclae(LC_TIME="c")
Sys.Setloclae(LC_TIME="c")
Sys.Setloclae(LC_TIME="c")
Sys.setloclae(LC_TIME="c")
Sys.setloclae()
Sys.setlocale()
Sys.setlocale()
Sys.setlocale(LC_TIME="c")
Sys.setlocale(LC_TIME=c)
Sys.setlocale("LC_TIME","C")
Sys.time
Sys.time()
Sys.setlocale("LC_TIME","C")
Sys.time()
Sys.setlocale("LC_TIME","C")
Sys.time()
months()
months(as.Date("2021-02-24"))
Sys.time()
months(as.Date("2021-02-24"))
Sys.setlocale()
months(as.Date("2021-02-24"))
days
daytes
dates
date
date(as.Date("2021-02-24"))
a<-as.Date("20221-02-24")
a<-as.Date("2021-02-24")
a
class(a)
?POSIXlt
POSIXlt()
POSIXlt(a)
POSIXlt()
a<-as.Date("2021-02-24")
a
POSIXct()
as.POSIXct(a)
as.POSIXlt(a)
as.POSIXct(a)
a<-as.Date("2021-02-24,16:28")
a
a<-as.Date("2021-02-24,16:28",format="%Y-%m-%d, %H:%M")
a
POSIXlt("2021-02-24,16:28",format="%Y-%m-%d, %H:%M")
as.POSIXct("2021-02-24,16:28",format="%Y-%m-%d, %H:%M")
b<-as.POSIXct("2021-02-24,16:28",format="%Y-%m-%d, %H:%M")
b$s
str(b)
as.integer(b)
c<-as.POSIXLT("2021-02-24,16:28",format="%Y-%m-%d, %H:%M")
c<-as.POSIXlt("2021-02-24,16:28",format="%Y-%m-%d, %H:%M")
as.integer(c)
c
str(c)
unlist(c)
y<-2020
m<-12
d<-31
ISOdate(y,m,d)
a<-ISOdate(y,m,d)
class(a)
as.Date(a)
years<-c(2025,2026,2027,2028)
rep(2025,2028,1)
seq(2025,2028,1)
years<-c(2025,2026,2027,2028)
seq(2025,2028)
month1<-c(1,3,2,4)
days<-c(21,12,15,9)
ISOdate(years,month1,days)
days<-c(21,12,15,39)
ISOdate(years,month1,days)
ISOdate(years,month1,days)
ISOdate(years,month1,days)
days<-c(21,12,15,9)
ISOdate(years,month1,days)
jdate<-as.Date("2025-12-31")
jdate
as.integer(jdate)
julian(jdate)
weekdays(as.Date("1970-01-01"))
starting<-as.Date("1988-09-17")
ending<-as.Date("2018-02-09")
starting
ending
ending-starting
difftime(starting,ending)
difftime(starting,ending,"week")
difftime(starting,ending,"weeks")
difftime(starting,ending,weeks)
difftime(Sys.Date(),as.Date("1997-09-27"), units="days")
difftime(Sys.Date(),as.Date("1997-09-27"), units="weeks")
difftime(Sys.Date(),as.Date("1997-09-27"), units="years")
difftime(Sys.Date(),as.Date("1997-09-27"), units="auto")
difftime(Sys.Date(),as.Date("1997-09-27"), units="auto")
difftime(Sys.Date(),as.Date("1997-09-27"), units="auto")
difftime(Sys.Date(),as.Date("1997-09-27"), units="hours")
Sys.date()> "2010-01-01"
Sys.date()> "2010-01-01"
Sys.date()> as.Date("2010-01-01")
Sys.date()> as.Date("2010-01-01")
Sys.Date()> as.Date("2010-01-01")
Sys.Date()> "2010-01-01"
install.packages("github")
d
search()
getwd()
save.image()
ls()
